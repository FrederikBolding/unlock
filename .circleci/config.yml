version: 2.1

executors:
  ubuntu_20-executor:
    machine:
      image: 'ubuntu-2004:202104-01'
      docker_layer_caching: true

jobs:
  unlock-protocol-com-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh unlock-protocol-com $CIRCLE_BRANCH
      - run:
          name: unlock-protocol-com tests
          command: scripts/tests.sh unlock-protocol-com

  unlock-app-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh unlock-app $CIRCLE_BRANCH
      - run:
          name: unlock-app tests
          command: scripts/tests.sh unlock-app

  unlock-js-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      BLOCKTIME: 0
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh unlock-js $CIRCLE_BRANCH
      - run:
          name: unlock-js tests
          command: scripts/tests.sh unlock-js
          no_output_timeout: 30m
      - run:
          name: Log failing tests
          command: ./scripts/docker-compose-log.sh
          when: on_fail

  smart-contracts-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh smart-contracts $CIRCLE_BRANCH
      - run:
          name: Smart Contract Tests
          command: scripts/tests.sh smart-contracts

  smart-contract-extensions-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh smart-contract-extensions $CIRCLE_BRANCH
      - run:
          name: Smart Contract Extension Tests
          command: scripts/tests.sh smart-contract-extensions

  locksmith-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      DB_USERNAME: locksmith_test
      DB_PASSWORD: password
      DB_NAME: locksmith_test
      DB_HOSTNAME: db
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Locksmith Tests
          command: scripts/tests.sh locksmith

  paywall-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh paywall $CIRCLE_BRANCH
      - run:
          name: Paywall Tests
          command: scripts/tests.sh paywall

  newsletter-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh newsletter $CIRCLE_BRANCH
      - run:
          name: Newsletter Tests
          command: scripts/tests.sh newsletter

  wedlocks-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh wedlocks $CIRCLE_BRANCH
      - run:
          name: Wedlocks Tests
          command: scripts/tests.sh wedlocks

  nudge-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh nudge $CIRCLE_BRANCH
      - run:
          name: Nudge Tests
          command: scripts/tests.sh nudge

  integration-tests:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          name: Integration Tests
          command: scripts/integration-tests.sh
      - store_artifacts:
          path: /tmp/screenshots
      - run:
          name: Log failing tests
          command: ./scripts/docker-compose-log.sh
          when: on_fail

  deploy-unlock-app-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh unlock-app $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" unlock-app netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-unlock-protocol-com-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh unlock-protocol.com $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh prod unlock-protocol-com netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-paywall-aws:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh paywall $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to AWS
          command: scripts/deploy-aws.sh "$ENV_TARGET" paywall "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-paywall-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh paywall $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" paywall netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-newsletter-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh newsletter $CIRCLE_BRANCH
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" newsletter netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-wedlocks-netlify:
    executor: ubuntu_20-executor
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh wedlocks $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Deploy to Netlify
          command: scripts/deploy.sh "$ENV_TARGET" wedlocks netlify "$CIRCLE_SHA1" "$CIRCLE_BRANCH" "$IS_FORKED_PR"

  deploy-locksmith-beanstalk:
    docker:
      - image: circleci/python:3.9.6
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: ./scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Set ENV_TARGET
          command: scripts/circleci/set-env-target.sh >> $BASH_ENV
      - run:
          name: Installing deployment dependencies
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade
      - run:
          name: Set GIT_COMMIT_DESC
          command: echo 'export GIT_COMMIT_DESC=$(git log --format=%B -n 1 "$CIRCLE_SHA1")' >> $BASH_ENV
      - run:
          name: Deploy Locksmith to Beanstalk
          command: locksmith/scripts/deploy-elasticbeanstalk-docker.sh

  deploy-nudge-beanstalk-staging:
    docker:
      - image: circleci/python:3.9.6
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh nudge $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: ./scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Installing deployment dependencies
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade
      - run:
          name: Set GIT_COMMIT_DESC
          command: echo 'export GIT_COMMIT_DESC=$(git log --format=%B -n 1 "$CIRCLE_SHA1")' >> $BASH_ENV
      - run:
          name: Deploy Staging to Beanstalk
          command: nudge/scripts/deploy-elasticbeanstalk-docker.sh "nudge" "nudge-rinkeby" "$LOCKSMITH_STAGING_DB_USERNAME" "$LOCKSMITH_STAGING_DB_PASSWORD" "$LOCKSMITH_STAGING_DB_NAME" "$LOCKSMITH_STAGING_DB_HOSTNAME" "$IS_FORKED_PR" "$CIRCLE_SHA1" "$LOCKSMITH_STAGING_WEB3_PROVIDER_HOST" "$LOCKSMITH_STAGING_GRAPHQL_BASE_URL" "$UNLOCK_APP_NETLIFY_PROD_WEDLOCKS_URI" 4

  deploy-nudge-beanstalk-production:
    docker:
      - image: circleci/python:3.9.6
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh nudge $CIRCLE_BRANCH
      - run:
          name: Set IS_FORKED_PR
          command: ./scripts/circleci/set-is-forked-pull-request.sh >> $BASH_ENV
      - run:
          name: Installing deployment dependencies
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install python3-pip python3-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade
      - run:
          name: Set GIT_COMMIT_DESC
          command: echo 'export GIT_COMMIT_DESC=$(git log --format=%B -n 1 "$CIRCLE_SHA1")' >> $BASH_ENV
      - run:
          name: Deploy Staging to Beanstalk
          command: nudge/scripts/deploy-elasticbeanstalk-docker.sh "nudge" "nudge-mainnet" "$DB_USERNAME" "$DB_PASSWORD" "$DB_NAME" "$DB_HOSTNAME" "$IS_FORKED_PR" "$CIRCLE_SHA1" "$WEB3_PROVIDER_HOST" "$GRAPHQL_BASE_URL" "$UNLOCK_APP_NETLIFY_PROD_WEDLOCKS_URI" 1
  
  build-and-deploy-to-heroku:
    executor: ubuntu_20-executor
    environment:
      DOCKER_REPOSITORY: unlockprotocol
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    parameters:
      service:
        description: "The Heroku app name to which the application should be deployed"
        type: string
      app-type:
        description: "The Heroku app type (web or worker) of the application to be deployed"
        type: string
        default: "web"
    steps:
      - checkout
    # - run:
    #       command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: Install Heroku CLI
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: Login into Heroku Docker Repository
          command: |
            docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Verify Container Login
          command: |
            heroku container:login
      - run:
          name: Build Docker Container
          command: |
            docker build --rm=false -t registry.heroku.com/<< parameters.service >>/<< parameters.app-type >> .
      - run:
          name: Push Container To Heroku
          command: |
            docker push registry.heroku.com/<< parameters.service >>/<< parameters.app-type >>
      - run:
          name: Release Deployed Container
          command: |
            heroku container:release << parameters.app-type >> -a << parameters.service >>

  promote-locksmith-image:
    executor: ubuntu_20-executor
    environment:
      DOCKER_REPOSITORY: unlockprotocol
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - checkout
      - run:
          command: scripts/monorepo.sh locksmith $CIRCLE_BRANCH
      - run:
          name: promote image
          command: scripts/promote-image.sh locksmith

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      - locksmith-tests
      - paywall-tests
      - newsletter-tests
      - smart-contracts-tests
      - smart-contract-extensions-tests
      - unlock-protocol-com-tests
      - wedlocks-tests
      - unlock-app-tests
      - unlock-js-tests
      - integration-tests:
          requires:
            - unlock-protocol-com-tests
            - unlock-app-tests
            - locksmith-tests
            - paywall-tests
            - wedlocks-tests
            - newsletter-tests
      - build-and-deploy-to-heroku:
          service: "unlock-protocol-locksmith"
          requires:
            - integration-tests
          # filters:
          #   branches:
          #     only: master
      - deploy-unlock-app-netlify:
          requires:
            - integration-tests
      - deploy-paywall-netlify:
          requires:
            - integration-tests
      - deploy-paywall-aws:
          requires:
            - integration-tests
      - deploy-newsletter-netlify:
          requires:
            - integration-tests
      - deploy-unlock-protocol-com-netlify:
          requires:
            - integration-tests
      - promote-locksmith-image:
          filters:
            branches:
              only:
                - master
                - production
      - deploy-locksmith-beanstalk:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - promote-locksmith-image
      - deploy-wedlocks-netlify:
          filters:
            branches:
              only: master
          requires:
            - integration-tests